apiVersion: v1
kind: Namespace
metadata:
  name: stablediffusion

---
apiVersion: ray.io/v1alpha1
kind: RayService
metadata:
  name: stablediffusion-service
  namespace: stablediffusion
spec:
  serviceUnhealthySecondThreshold: 900
  deploymentUnhealthySecondThreshold: 300
  serveConfig:
    importPath: ray_serve_stablediffusion:entrypoint # Specify the correct path to your Python script
    runtimeEnv: |
      env_vars: {"MODEL_ID": "aws-neuron/stable-diffusion-xl-base-1-0-1024x1024"}  # Replace with the appropriate model ID

  rayClusterConfig:
    rayVersion: '2.9.0' # should match the Ray version in the image of the containers
    ## raycluster autoscaling config
    enableInTreeAutoscaling: true
    autoscalerOptions:
      upscalingMode: Default
      resources:
        limits:
          cpu: "1"
          memory: "1000Mi"
        requests:
          cpu: "1"
          memory: "1000Mi"
    ###################### headGroupSpecs #################################
    headGroupSpec:
      serviceType: NodePort
      headService:
        metadata:
          name: stablediffusion-service
          namespace: stablediffusion
      rayStartParams:
        dashboard-host: '0.0.0.0'
      template:
        spec:
          containers:
          - name: ray-head
            image: public.ecr.aws/data-on-eks/ray2.9.0-py310-stablediffusion-neuron:latest
            # imagePullPolicy: Always # Ensure the image is always pulled when updated
            # lifecycle:
            #   preStop:
            #     exec:
            #       command: ["/bin/sh", "-c", "ray stop"]
            ports:
            - containerPort: 6379
              name: gcs-server
            - containerPort: 8265
              name: dashboard
            - containerPort: 10001
              name: client
            - containerPort: 8000
              name: serve
            volumeMounts:
            - mountPath: /tmp/ray
              name: ray-logs
            resources:
              limits:
                cpu: 2
                memory: 2Gi
              requests:
                cpu: 2
                memory: 2Gi
          nodeSelector:
            instanceType: mixed-x86
            provisionerType: Karpenter
            workload: rayhead
          volumes:
          - name: ray-logs
            emptyDir: {}
    workerGroupSpecs:
    - groupName: inf2-worker-group
      replicas: 0
      minReplicas: 0
      maxReplicas: 5
      rayStartParams: {}
      template:
        spec:
          containers:
          - name: ray-worker
            image: public.ecr.aws/data-on-eks/ray2.9.0-py310-stablediffusion-neuron:latest # Image created using the Dockerfile attached in the folder
            imagePullPolicy: Always # Ensure the image is always pulled when updated
            lifecycle:
              preStop:
                exec:
                  command: ["/bin/sh", "-c", "ray stop"]
            # We are using 2 Neuron cores per HTTP request hence this configuration handles 6 requests per second
            resources:
              limits:
                cpu: "90" # All vCPUs of inf2.24xlarge; 6vCPU daemonset overhead
                memory: "360G" # All memory of inf2.24xlarge; 24G for daemonset overhead
                aws.amazon.com/neuron: "6" # All Neuron cores of inf2.24xlarge
              requests:
                cpu: "45" # Half of vCPUs for reservation for inf2.24xlarge; leaving 3 vCPUs for daemonset overhead
                memory: "180G" # Half of memory for reservation for inf2.24xlarge; leaving 12G for daemonset overhead
                # Set maximum neuron core available to the instance to acocomodate multiple requests to leverage all the neuron cores
                # You cannot run multiple pods of the model on the same instance unless you shard the model
                aws.amazon.com/neuron: "6" # All Neuron cores of inf2.24xlarge
          nodeSelector:
            instanceType: inferentia-inf2
            provisionerType: Karpenter
          tolerations:
          - key: "aws.amazon.com/neuroncore"
            operator: "Exists"
            effect: "NoSchedule"
          - key: "aws.amazon.com/neuron"
            operator: "Exists"
            effect: "NoSchedule"
          - key: "hub.jupyter.org/dedicated"
            operator: "Equal"
            value: "user"
            effect: "NoSchedule"
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: stablediffusion-ingress
  namespace: stablediffusion
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: "/$1"
spec:
  ingressClassName: nginx
  rules:
  - http:
      paths:
      # Ray Dashboard
      - path: /dashboard/(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: stablediffusion-service
            port:
              number: 8265
      # Ray Serve
      - path: /serve/(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: stablediffusion-service
            port:
              number: 8000
