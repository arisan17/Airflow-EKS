proxy:
  service:
    type: ClusterIP

singleuser:
  image:
    name: jupyter/minimal-notebook
    tag: latest
  profileList: # Enable GPU accelerator for every user
    - display_name: "CPU Server"
      description: "Spawns a notebook server with CPUs only"
      kubespawner_override: 
        enable_user_namespaces: true
      default: true
    - display_name: "GPU Server"
      description: "Spawns a notebook server with access to a GPU"
      kubespawner_override:
        #enable_user_namespaces: true #buggy
        extra_resource_limits:
          nvidia.com/gpu: "1" # TIME-SLICING: Use a slice of GPU using time-slicing mode
          # nvidia.com/mig-1g.5gb: 1 # NVIDIA MIG: Use this config with MIG instead
        image: cschranz/gpu-jupyter:v1.5_cuda-11.6_ubuntu-20.04_python-only
        tolerations:
          - key: "nvidia.com/gpu"
            operator: "Exists"
            effect: "NoSchedule"
  cpu: # Amount of CPU and memory assgined to each notebook pod
    limit: 2
    guarantee: 2
  memory:
    limit: 4G
    guarantee: 4G
  storage:
    type: "static"
    static:
      pvcName: "efs-persist"
      subPath: "home/{username}"
    extraVolumes:
    - name: jupyterhub-shared
      persistentVolumeClaim:
        claimName: efs-persist-shared
    extraVolumeMounts:
    - name: jupyterhub-shared
      mountPath: /home/shared
      readOnly: false
  serviceAccountName: ${jupyter_single_user_sa_name}
  allowPrivilegeEscalation: true
  extraPodConfig: # This is needed for Jovyan user running in every single pod, access the Service Account
    securityContext:
        fsGroup: 100
  extraEnv: # Sudo needed to configure the proper permissions to start the notebook instance
    GRANT_SUDO: "yes"
    NOTEBOOK_ARGS: "--allow-root"
    CHOWN_HOME: "yes"
    CHOWN_HOME_OPTS: "-R"
    CHOWN_EXTRA: "/home/shared"
  uid: 0
  fsGid: 0
  cmd: "start-singleuser.sh"

# Optimizations configured according to this doc https://z2jh.jupyter.org/en/latest/administrator/optimization.html
scheduling:
  userScheduler:
    enabled: true
  podPriority:
    enabled: true
  userPlaceholder:
    enabled: false
    replicas: 1
  userPods:
    nodeAffinity:
      matchNodePurpose: require # This will force single-user pods to use a specific karpenter provisioner

prePuller:
  hook:
    enabled: false
  continuous:
    # NOTE: if used with Karpenter, also add user-placeholders
    enabled: false

global:
  safeToShowValues: false

hub:
  db:
    pvc:
      storage: 50Gi
      storageClassName: gp3
  authenticatePrometheus: false
